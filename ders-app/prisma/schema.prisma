// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Your specified output path
}

datasource db {
  provider = "postgresql" // Correct for Supabase
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
}

// -----------------------------
// --- Models
// -----------------------------

model User {
  id                  String   @id @default(uuid()) @db.Uuid
  telegram_user_id    BigInt   @unique
  first_name          String
  username            String?
  profile_picture_url String?
  role                Role     @default(STUDENT)
  points              Int      @default(0)

  current_ders_id     String?
  
  ders_progress       UserDersProgress[]
  audio_part_progresses UserAudioPartProgress[]
  bookmarks           Bookmark[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("users") // Maps this model to the 'users' table in the DB
}

model Ustadh {
  id        String   @id @default(uuid()) @db.Uuid
  name      String @unique
  bio       String?
  photo_url String?
  
  derses    Ders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ustadhs")
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String @unique
  description String?
  
  derses      Ders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Ders {
  id                String    @id @default(uuid()) @db.Uuid
  title             String
  description       String
  thumbnail_url     String?
  book_pdf_url      String?
  is_published      Boolean   @default(false)
  order             Int       @default(0)

  ustadh_id         String   @db.Uuid
  ustadh            Ustadh    @relation(fields: [ustadh_id], references: [id])
  
  category_id       String   @db.Uuid
  category          Category  @relation(fields: [category_id], references: [id])
  
  audio_parts       AudioPart[]
  user_progress     UserDersProgress[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("derses") // Changed to plural for consistency
}

model ShortDers {
  id                String    @id @default(uuid()) @db.Uuid
  title             String
  description       String
  is_published      Boolean   @default(false)
  order             Int       @default(0)

  ustadh_id         String   @db.Uuid
  
  category_id       String   @db.Uuid
  category          Category  @relation(fields: [category_id], references: [id])
  
  telegram_file_id      String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("short_derses")
}

model AudioPart {
  id                    String    @id @default(uuid()) @db.Uuid
  title                 String
  telegram_message_link String
  telegram_file_id      String?
  duration_in_seconds   Int?
  order                 Int

  ders_id               String   @db.Uuid
  ders                  Ders      @relation(fields: [ders_id], references: [id], onDelete: Cascade)
  
  quiz                  Quiz?
  user_progress         UserAudioPartProgress[]
  bookmarks             Bookmark[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("audio_parts")
}

model Quiz {
  id           String    @id @default(uuid()) @db.Uuid
  
  // Add @unique to this line
  audio_part_id String    @unique @db.Uuid

  audio_part    AudioPart @relation(fields: [audio_part_id], references: [id], onDelete: Cascade)

  questions     QuizQuestion[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("quizzes")
}
model QuizQuestion {
  id             String   @id @default(uuid()) @db.Uuid
  question       String
  options        String[]
  correct_answer String
  explanation    String?

  quiz_id     String   @db.Uuid
  quiz        Quiz     @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model UserDersProgress {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  ders_id    String   @db.Uuid


  status     DersStatus @default(IN_PROGRESS)
  started_at DateTime @default(now())
  completed_at DateTime?

  user       User     @relation(fields: [user_id], references: [id])
  ders       Ders     @relation(fields: [ders_id], references: [id])

  @@unique([user_id, ders_id])
  @@map("user_ders_progress")
}

enum DersStatus {
  IN_PROGRESS
  COMPLETED
}

model UserAudioPartProgress {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  audio_part_id String   @db.Uuid
  quiz_score    Int?
  quiz_attempts Int      @default(0)
  is_completed  Boolean  @default(false)
  
  user          User     @relation(fields: [user_id], references: [id])
  audio_part    AudioPart @relation(fields: [audio_part_id], references: [id])
  
  @@unique([user_id, audio_part_id])
  @@map("user_audio_part_progress")
}

model Bookmark {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  audio_part_id String   @db.Uuid
  
  user          User     @relation(fields: [user_id], references: [id])
  audio_part    AudioPart @relation(fields: [audio_part_id], references: [id])

  createdAt     DateTime @default(now())
  
  @@unique([user_id, audio_part_id])
  @@map("bookmarks")
}